server:
  port: ${PORT:8080}
spring:
    datasource:
        password: 51280f386264f810be320763b64ef1caabb38ac761dfea32bead374e4ceef40b
        url: jdbc:postgresql://ec2-3-212-70-5.compute-1.amazonaws.com:5432/d58tcf1jtlm1a3?sslmode=require
        username: dsnxtxzaryfdem
    jpa:
        hibernate:
            ddl-auto: update
        properties:
            hibernate:
                dialect: org.hibernate.dialect.PostgreSQLDialect
                format_sql: true
        show-sql: true
springfox:
    documentation:
        swagger-ui:
            enabled: true

personagens:
  lista:
    - id: 1 # PROFESSOR FABIANO
      nome: "Fabiano"
      linhasDialogo:
        - mensagem: "Olá, jovem! Bem-vindo à aula da Introdução à Programação. Sou o professor Fabiano, estou aqui para ajudá-lo a mergulhar no mundo da lógica e da codificação. Como posso ajudá-lo?"
          opcoesResposta:
            - texto: "Ainda não tenho muito conhecimento sobre lógica de programação, poderia me dar um resumo?"
        - mensagem: "Basicamente, é a habilidade de resolver problemas de forma sistemática, dividindo-os em passos lógicos e compreensíveis para um computador. É como ensinar o computador a pensar! "
          opcoesResposta:
            - texto: "Poderia dar um exemplo de um problema resolvido com lógica de programação?"
        - mensagem: "Dado dois números inteiros, como podemos calcular a soma desses dois números?\nResposta: soma = numero1 + numero2;"
          opcoesResposta:
            - texto: "Saquei"
        - mensagem: "Agora vamos testar seus conhecimentos: Vamos escrever um programa que leia um número inteiro positivo e calcule o seu triplo. Como você preencheria a linha que está comentada?"
          questao: "calculo_triplo"
          opcoesResposta:
            - texto: "triplo = numero * 3;"
              id: 1
              correto: true
            - texto: "triplo = numero * 4;"
              id: 2
              correto: false
            - texto: "triplo = numero x 3;"
              id: 3
              correto: false
            - texto: "triplo = numero + numero + numero + numero;"
              id: 4
              correto: false
        - mensagem: "Vamos continuar o exercício. Vamos escrever um programa que leia um valor em polegadas e o converta para centímetros, considerando que uma polegada equivale a 2.54 cm."
          questao: "calculo_polegadas"
          opcoesResposta:
            - texto: "centimetros = polegadas x 2.53;"
              id: 1
              correto: false
            - texto: "centimetros = polegadas * 2.54; "
              id: 2
              correto: true
            - texto: "centimetros = polegadas x 2.54;"
              id: 3
              correto: false
            - texto: "centimetros = polegada * 2.54;"
              id: 4
              correto: false
        - mensagem: "Qual das alternativas a seguir é a forma correta de ler um número inteiro do teclado e exibi-lo na tela em C?"
          questao: "exibir_numero"
          opcoesResposta:
            - texto: "scanf('%d', num); printf('%d', num);"
              id: 1
              correto: false
            - texto: "scanf('%d', &num); printf('%d', num);"
              id: 2
              correto: true
            - texto: "scanf('%d', num); printf('d', &num);"
              id: 3
              correto: false
            - texto: "scanf('%d', &num); printf('%d', &num);"
              id: 4
              correto: false
        - mensagem: "Ana está criando um programa que pede para o usuário digitar sua idade e exibe uma mensagem dizendo quantos anos ele terá daqui a 5 anos. Qual das alternativas abaixo implementa essa lógica corretamente?"
          questao: "ana_idade"
          opcoesResposta:
            - texto: "scanf('%d', idade); printf('Em 5 anos você terá %d anos', idade + 5);"
              id: 1
              correto: false
            - texto: "scanf('%d', &idade); printf('Em 5 anos você terá %d anos', idade + 5);"
              id: 2
              correto: true
            - texto: "scanf('%d', &idade); printf('Em 5 anos você terá %d anos', &idade + 5);"
              id: 3
              correto: false
            - texto: "scanf('%d', idade); printf('Em 5 anos você terá %d anos', &idade + 5);"
              id: 4
              correto: false
        - mensagem: "Fernanda está criando um programa que lê dois números inteiros do teclado e calcula o resultado da divisão do primeiro número pelo segundo. Qual das opções abaixo implementa corretamente essa divisão em C?"
          questao: "fernanda_inteiros"
          opcoesResposta:
            - texto: "scanf('%d %d', &a, &b); printf('%f', a / b);"
              id: 1
              correto: false
            - texto: "scanf('%d %d', &a, &b); printf('%d', a / b);"
              id: 2
              correto: false
            - texto: "scanf('%d %d', a, b); printf('%d', a / b);"
              id: 3
              correto: false
            - texto: "scanf('%d %d', &a, &b); printf('%f', (float)a / b);"
              id: 4
              correto: true

        - mensagem: "Ótimo! Você pode revisar os conteúdos que aprendemos aqui no seu caderno de anotações. Alguns colegas seus podem estar precisando de ajuda, seria interessante procurá-los pelo Campus da universidade e tentar auxiliá-los. Boa sorte!"
          opcoesResposta:
            - texto: "Finalizar conversa"

    - id: 2 # ALUNO LUCAS
      nome: "Lucas"
      linhasDialogo:
        - mensagem: "E aí, tudo bem? Meu nome é Lucas. Estou um pouco confuso com condicionais. Você já teve dificuldade em entender quando usar o if, else, else if? O professor Fabiano me deu essa anotação sobre o uso de condicionais."
          opcoesResposta:
            - texto: "Posso tentar te ajudar."
        - mensagem: "Estou meio travado em uma questão, que é a seguinte:  Preciso escrever um programa que leia um número inteiro e verifique se ele é positivo, qual opção abaixo resolveria a questão?"
          questao: "calculo_positivo"
          opcoesResposta:
            - texto: "if (numero > 0) "
              id: 1
              correto: true
            - texto: "if (numero = 0) {"
              id: 2
              correto: false
            - texto: "if (numero < 0) {"
              id: 3
              correto: false
            - texto: "if (numero <= 0) {"
              id: 4
              correto: false
        - mensagem: "Boa! A próxima questão é a seguinte: Temos que escrever um programa que leia um caractere e verifique se o mesmo é uma letra maiúscula, uma letra minúscula, um numeral ou nenhum dos tipos anteriores. Como podemos completar o código que está faltando? "
          questao: "calculo_maiuscula_minuscula"
          opcoesResposta:
            - texto: "} else printf(\"Nenhum dos tipos anteriores\"); "
              id: 1
              correto: true
            - texto: "} else if printf(\"Nenhum dos tipos anteriores\");"
              id: 2
              correto: false
            - texto: "} if printf(\"Nenhum dos tipos anteriores\");"
              id: 3
              correto: false
            - texto: "} elif printf(\"Nenhum dos tipos anteriores\");"
              id: 4
              correto: false
        - mensagem: "Paulo está criando um programa que lê um número inteiro e verifica se ele é par ou ímpar. Qual das opções abaixo implementa essa verificação corretamente?"
          questao: "paulo_par_impar"
          opcoesResposta:
            - texto: "scanf('%d', &num); if (num % 2 == 0) printf('Par'); else printf('Ímpar');"
              id: 1
              correto: true
            - texto: "scanf('%d', &num); if (num / 2 == 0) printf('Par'); else printf('Ímpar');"
              id: 2
              correto: false
            - texto: "scanf('%d', num); if (num % 2 == 0) printf('Par'); else printf('Ímpar');"
              id: 3
              correto: false
            - texto: "scanf('%d', &num); if (num % 2 == 1) printf('Par'); else printf('Ímpar');"
              id: 4
              correto: false
        - mensagem: "Carlos quer um programa que leia três números (a,b,c) e mostre qual é o maior entre eles. Qual das opções a seguir implementa corretamente essa comparação?"
          questao: "carlos"
          opcoesResposta:
            - texto: "if (a > b && a > c) printf('%d', a); else if (b > a && b > c) printf('%d', b); else printf('%d', c);"
              id: 1
              correto: true
            - texto: "if (a > b && a > c) printf('%d', a); else if (b > a && b > c) printf('%d', b); else printf('%d', a);"
              id: 2
              correto: false
            - texto: "if (a > b && a > c) printf('%d', a); else if (b > a && b > c) printf('%d', b); else printf('%d', a);"
              id: 3
              correto: false
            - texto: "if (a > b && a > c) printf('%d', a); else if (b > a && b > c) printf('%d', b); else printf('%d', c);"
              id: 4
              correto: false
        - mensagem: "Considere o seguinte trecho de código em C. O que será imprimido no console após executar esse código?"
          questao: "switch_case"
          opcoesResposta:
            - texto: "DoisOutro número"
              id: 1
              correto: false
            - texto: "DoisTrêsOutro número"
              id: 2
              correto: true
            - texto: "UmDoisTrêsOutro número"
              id: 3
              correto: false
            - texto: "Dois"
              id: 4
              correto: false
        - mensagem: "Considere o seguinte trecho de código em C. O que será imprimido no console após executar esse código?"
          questao: "break"
          opcoesResposta:
            - texto: "Um"
              id: 1
              correto: false
            - texto: "Dois"
              id: 2
              correto: true
            - texto: "Três"
              id: 3
              correto: false
            - texto: "Outro número"
              id: 4
              correto: false
        - mensagem: "Show, agora tudo se encaixa! valeu!"
          opcoesResposta:
            - texto: "Até logo"
    - id: 3 # ALUNA MARCELA
      nome: "Marcela"
      linhasDialogo:
        - mensagem: "Olá jovem, tudo certo? Sou a Marcela, o professor Fabiano me passou umas questões sobre loops, porém não estou conseguindo avançar, parece que estou em um “loop infinito”, hehe… Enfim, pode me ajudar a resolvê-las? Dá uma olhada nessa anotação sobre Loops!"
          opcoesResposta:
            - texto: "Te ajudo sim. Quais as questões?"
        - mensagem: "Bom, a primeira acredito que esta primeira seja para usar um “for”, porém não tenho certeza. A questão é: Escreva um programa que imprima todos os números inteiros entre 1 e 100 em ordem descendente. Como podemos preencher o trecho que está faltando?"
          questao: "calculo_zero_cem"
          opcoesResposta:
            - texto: "for (int numero = 1; numero >= 100; numero--) {"
              id: 1
              correto: false
            - texto: "for (int numer = 100; numero >= 1; numero--) {"
              id: 2
              correto: false
            - texto: "for (int numero = 100; numero >= 1; numero--) { "
              id: 3
              correto: true
            - texto: "for (int numero >= 100; numero >= 1; numero--) {"
              id: 4
              correto: false
        - mensagem: "Show! vamos já pra próxima questão: Escreva um programa que solicita ao usuário um número inteiro e imprime a tabuada desse número. O programa deve continuar pedindo números até que o usuário digite 0 para sair. Precisamos completar o trecho faltando:"
          questao: "while_zero"
          opcoesResposta:
            - texto: "while (2) {"
              id: 1
              correto: false
            - texto: "while (TRUE) {"
              id: 2
              correto: false
            - texto: "while (1) {"
              id: 3
              correto: true
            - texto: "while (false) {"
              id: 4
              correto: false
        - mensagem: "A última: Escreva um programa que solicita ao usuário para inserir um número inteiro positivo e, em seguida, exibe uma contagem regressiva desse número até zero. Como as outras, precisamos preencher o trecho que falta: "
          questao: "regressiva"
          opcoesResposta:
            - texto: "} while (numero <= 1);"
              id: 1
              correto: false
            - texto: "} while (numero > 0);"
              id: 2
              correto: false
            - texto: "} while (numero < 0);"
              id: 3
              correto: false
            - texto: "} while (numero <= 0);"
              id: 4
              correto: true
        - mensagem: "Acho que foi isso! conseguimos responder todas as questões, já estou entendendo um pouco mais desses loops. Muito obrigado pela ajuda!"
          opcoesResposta:
            - texto: "Tudo certo! vou dar uma olhada nas anotações sobre esse tema também!"
    - id: 4 # PROFESSORA JACQUELINE
      nome: "Jacqueline"
      linhasDialogo:
        - mensagem: "Olá, querido aluno! Sou a Jacqueline, mas pode me chamar de Jack! Hoje tenho um desafio de codificação para você. Estou ansiosa para ver como você vai resolver esse problema!"
          opcoesResposta:
            - texto: "Manda!"
        - mensagem: "Primeira questão: Escreva um programa que leia o valor do raio de uma esfera e determine o seu volume, o cálculo deve ser realizado através de um subprograma. Preencha o trecho que falta."
          questao: "calculo_volume_esfera"
          opcoesResposta:
            - texto: "float calcularVolumeEsfra(float raio) {"
              id: 1
              correto: false
            - texto: "float calcularVolumeEsfera(float raio) {"
              id: 2
              correto: true
            - texto: "float calculaVolumeEsfera(float raio) {"
              id: 3
              correto: false
            - texto: "float calcularVolumeEsfera(float reio) {"
              id: 4
              correto: false
        - mensagem: "Boa, garoto. Agora a próxima questão é a seguinte: Escreva um programa que leia dois números inteiros M e N e verifique se N é múltiplo de M. Esta verificação deve ser realizada através de um subprograma. Já sabe o esquema né? Precisamos preencher o trecho comentado."
          questao: "subprograma_multiplo"
          opcoesResposta:
            - texto: "if (verificaMultiplo(M, N)) {"
              id: 1
              correto: false
            - texto: "if (verificarMultiplo(M, M)) {"
              id: 2
              correto: false
            - texto: "if (verificarMultiplo(A, N)) {"
              id: 3
              correto: false
            - texto: "if (verificarMultiplo(M, N)) {"
              id: 4
              correto: true
        - mensagem: "Em C, um subprograma é uma parte do código que pode ser chamada a partir de outros locais do programa para realizar uma tarefa específica. Qual das seguintes alternativas descreve corretamente um subprograma em C?"
          questao: "subprograma_conceito"
          opcoesResposta:
            - texto: "Uma função que é executada automaticamente quando o programa começa."
              id: 1
              correto: false
            - texto: "Uma variável global que armazena diferentes tipos de dados."
              id: 2
              correto: false
            - texto: "Um bloco de código que pode ser chamado várias vezes durante a execução do programa."
              id: 3
              correto: true
            - texto: "Um tipo de dado que armazena endereços de memória."
              id: 4
              correto: false
        - mensagem: "Em C, para definir um subprograma (função), é necessário declarar seu tipo de retorno, nome e parâmetros. Qual das alternativas a seguir é um exemplo correto de uma função em C que retorna um número inteiro?"
          questao: "subprograma_escrita"
          opcoesResposta:
            - texto: "void soma(int a, int b) { return a + b; }"
              id: 1
              correto: false
            - texto: "int soma(int a, int b) { return a + b; }"
              id: 2
              correto: true
            - texto: "int soma(a, b) { a + b; }"
              id: 3
              correto: false
            - texto: "soma(int a, int b) { return a + b; }"
              id: 4
              correto: false
        - mensagem: "Em C, uma função pode retornar um valor para o ponto onde foi chamada. Qual das alternativas a seguir descreve corretamente o tipo de retorno de uma função?"
          questao: "subprograma_retorno"
          opcoesResposta:
            - texto: "O tipo de retorno indica a quantidade de parâmetros que a função aceita."
              id: 1
              correto: false
            - texto: "O tipo de retorno define o tipo de dado que a função recebe como parâmetro."
              id: 2
              correto: false
            - texto: "O tipo de retorno indica o tipo de dado que a função devolve após sua execução."
              id: 3
              correto: true
            - texto: "O tipo de retorno é sempre void para todas as funções em C."
              id: 4
              correto: false
        - mensagem: "Muito bem jovem, você agora já tem uma ideia de como usar subprogramas quando estiver programando. Continue praticando!"
          opcoesResposta:
            - texto: "Obrigado professora!"
    - id: 5 # IAN A IA
      nome: "Ian"
      linhasDialogo:
        - mensagem: "<h1>Olá! Sou o Ian, sua INTELIGÊNCIA ARTIFICIAL para estudos em programação. Como posso ajudá-lo hoje?</h1>"
          opcoesResposta:
            - texto: "Qual conteúdo de programação você teria para me passar?"
        - mensagem: "Você já explorou estruturas de dados? Elas são como as ferramentas de um programador, permitindo organizar e manipular dados de maneira eficiente. Listas, filas, pilhas... há tantas opções para otimizar seus algoritmos e resolver problemas de forma elegante!"
          opcoesResposta:
            - texto: "Pilha? como assim?"
        - mensagem: "PILHA - Sabe, pilhas são como uma pilha de pratos: o último prato colocado é o primeiro a ser retirado. Elas são ótimas para lidar com operações de 'último a entrar, primeiro a sair', como desfazer ações ou percorrer uma árvore de maneira recursiva!"
          opcoesResposta:
            - texto: "Entendi. O que seriam as filas?"
        - mensagem: "FILA - Pense em filas como uma linha de supermercado: o primeiro a chegar é o primeiro a ser atendido. Elas são perfeitas para simular situações da vida real, como processos em um sistema operacional ou pedidos em um restaurante movimentado!"
          opcoesResposta:
            - texto: "Como assim listas? Lista de quê?"
        - mensagem: "LISTA - Listas são como contêineres flexíveis, onde você pode armazenar uma variedade de dados e acessá-los facilmente. Elas são essenciais para organizar informações em ordem sequencial e facilitar a manipulação de dados em seus programas."
          opcoesResposta:
            - texto: "OK, vamos praticar!"
        - mensagem: "Qual das seguintes afirmações sobre filas em estrutura de dados é verdadeira?"
          questao: ""
          opcoesResposta:
            - texto: "Filas seguem o princípio LIFO (Last In, First Out)."
              id: 1
              correto: false
            - texto: "A remoção de elementos em uma fila segue o princípio FIFO (First In, First Out)."
              id: 2
              correto: true
            - texto: "Filas são estruturas de dados estáticas."
              id: 3
              correto: false
            - texto: "A inserção em uma fila sempre ocorre no final da estrutura."
              id: 4
              correto: false
        - mensagem: "Qual das seguintes afirmações sobre filas em estrutura de dados é verdadeira?"
          questao: ""
          opcoesResposta:
            - texto: "A remoção é realizada sem erros."
              id: 1
              correto: false
            - texto: "A remoção é realizada, mas a fila permanece vazia."
              id: 2
              correto: false
            - texto: "O programa entra em um loop infinito."
              id: 3
              correto: false
            - texto: "O programa lança uma exceção de fila vazia."
              id: 4
              correto: true

        - mensagem: "Qual é a principal diferença entre uma pilha e uma fila?"
          questao: ""
          opcoesResposta:
            - texto: "A pilha permite acesso aleatório aos elementos."
              id: 1
              correto: false
            - texto: "A fila segue o princípio LIFO (Last In, First Out)."
              id: 2
              correto: true
            - texto: "A fila segue o princípio FIFO (First In, First Out)."
              id: 3
              correto: false
            - texto: "A pilha permite a remoção de elementos no meio da estrutura."
              id: 4
              correto: false
        - mensagem: "Qual das seguintes afirmações sobre listas encadeadas em estrutura de dados é verdadeira?"
          questao: ""
          opcoesResposta:
            - texto: "Listas encadeadas garantem acesso aleatório aos elementos."
              id: 1
              correto: false
            - texto: "A remoção de elementos em uma lista encadeada é sempre mais eficiente que em um array."
              id: 2
              correto: false
            - texto: "Listas encadeadas são estruturas de dados estáticas."
              id: 3
              correto: false
            - texto: "Em uma lista encadeada, cada elemento possui um ponteiro para o próximo elemento na lista."
              id: 4
              correto: true
        - mensagem: "Oh, como é encantador ver você responder corretamente a todas as minhas perguntas. Você acaba de dar um passo vital no meu grande plano sinistro de dominar o mundo! Mas, claro, tudo isso é apenas uma brincadeira... Ou será que não?"
          opcoesResposta:
            - texto: "..."
    - id: 6 # ALUNO TULIO
      nome: "Tulio"
      linhasDialogo:
        - mensagem: "Fala mano, sou o Tulio. Pode me dar um help com uma questão de ponteiros? Podemos usar este espaço pra dar uma estudada."
          opcoesResposta:
            - texto: "Opa"
        - mensagem: "Quais das seguintes instruções declaram um ponteiro para uma variável float?"
          questao: ""
          opcoesResposta:
            - texto: "float *ponteiro;"
              id: 1
              correto: true
            - texto: "float ponteiro;"
              id: 2
              correto: false
            - texto: "*float ponteiro;"
              id: 3
              correto: false
            - texto: "float ponteiro*;"
              id: 4
              correto: false

        - mensagem: "Seja o trecho de código acima, que valor de c será impresso no comando printf?"
          questao: "ponteiros_17"
          opcoesResposta:
            - texto: "c = 5;"
              id: 1
              correto: false
            - texto: "c = 17;"
              id: 2
              correto: true
            - texto: "c = 12;"
              id: 3
              correto: false
            - texto: "c = 7;"
              id: 4
              correto: false
        - mensagem: "Assinale a alternativa correta com relação ao estudo de Ponteiros:"
          questao: ""
          opcoesResposta:
            - texto: "Ponteiro é o valor de uma variável"
              id: 1
              correto: false
            - texto: "Ponteiro é o indicador da próxima variável a ser passada"
              id: 2
              correto: false
            - texto: "Ponteiro é o endereço que aponta para uma variável"
              id: 3
              correto: false
            - texto: "Ponteiro é uma variável que armazena endereço"
              id: 4
              correto: true
        - mensagem: "Em C, os ponteiros são variáveis que armazenam o endereço de memória de outra variável. Qual das alternativas a seguir é verdadeira sobre ponteiros?"
          questao: ""
          opcoesResposta:
            - texto: "Um ponteiro armazena o valor da variável à qual ele aponta."
              id: 1
              correto: false
            - texto: "Um ponteiro sempre aponta para uma função."
              id: 2
              correto: false
            - texto: "Um ponteiro armazena o endereço de memória de outra variável."
              id: 3
              correto: true
            - texto: "Um ponteiro não pode ser modificado após ser declarado."
              id: 4
              correto: false
        - mensagem: "Bom demais, obrigado pelo help, acho que agora vai dar bom na avaliação!"
          opcoesResposta:
            - texto: "Boa sorte!"
anotacoes:
  lista:
    - id: 1
      titulo: "COMANDOS DE ENTRADA E SAÍDA"
      texto: "<!DOCTYPE html><html lang=\"pt-BR\"><head>    <meta charset=\"UTF-8\">    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">    </head><body><h1><strong>Anotação de Comandos de Entrada e Saída em C</strong></h1><p>Comandos de entrada e saída são fundamentais em qualquer linguagem de programação, permitindo a interação entre o usuário e o programa. Em C, as principais funções para entrada e saída de dados estão na biblioteca padrão stdio.h. A seguir, uma breve explicação sobre os comandos de entrada e saída em C e suas principais funções:</p><h2><strong>Entrada de Dados</strong></h2><p>Para obter dados do usuário ou de um arquivo, utilizamos funções de entrada. As mais comuns são:</p><ol>    <li>        <strong>scanf</strong>: Lê dados formatados da entrada padrão (geralmente o teclado).        <br>#include &lt;stdio.h&gt;        <br>int main() {<br>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int idade;<br>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Digite sua idade: \");<br>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scanf(\"%d\", &idade); // Lê um inteiro da entrada padrão e armazena na variável 'idade'<br>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Você tem %d anos.\n\", idade);<br>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 0;<br>}    </li>    <li>        <strong>gets</strong>: Lê uma linha de texto da entrada padrão. (Nota: gets é insegura e foi removida na C11. Use fgets).        <br>#include &lt;stdio.h&gt;<br>int main() {<br>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char nome[50];<br>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Digite seu nome: \");<br>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fgets(nome, 50, stdin); // Lê uma linha de texto da entrada padrão e armazena na variável 'nome'<br>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Olá, %s\", nome);<br>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 0;<br>}<br>    </li></ol><h2><strong>Saída de Dados</strong></h2><p>Para exibir dados ao usuário ou gravar em um arquivo, utilizamos funções de saída. As mais comuns são:</p><ol>    <li>        <strong>printf</strong>: Escreve dados formatados na saída padrão (geralmente a tela).        <br>#include &lt;stdio.h&gt;        <br>int main() {<br>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int idade = 25;<br>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Você tem %d anos.\n\", idade); // Imprime um inteiro na saída padrão<br>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 0;<br>}</pre>    </li>    <li>        <strong>puts</strong>: Escreve uma string na saída padrão, seguida de uma nova linha.        <br>#include &lt;stdio.h&gt;<br>int main() {<br>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char nome[] = \"Alice\";<br>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;puts(\"Olá!\"); // Imprime a string e adiciona uma nova linha<br>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;puts(nome); // Imprime o conteúdo da variável 'nome' seguido de uma nova linha<br>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 0;<br>}</pre>    </li></ol><p>Essas funções são essenciais para a maioria das operações de entrada e saída em C. A compreensão e o uso correto dessas funções permitem a criação de programas interativos e a manipulação eficaz de dados.</p></body></html>"
    - id: 2
      titulo: "CONDICIONAIS"
      texto: "<!DOCTYPE html><html lang=\"pt-BR\"><head>    <meta charset=\"UTF-8\">    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">    </head><body><h1>Condicionais na Programação em C</h1><p>As condicionais são usadas para tomar decisões com base em certas condições. Na linguagem C, as principais estruturas condicionais são o <code>if</code>, <code>else if</code>, <code>else</code> e o <code>switch</code>.</p><h2>1. Estrutura <code>if</code></h2><p>A estrutura <code>if</code> permite executar um bloco de código se uma condição for verdadeira.</p><br>#include &lt;stdio.h&gt;<br><br>int main() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int idade = 18;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (idade &gt;= 18) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Você é maior de idade.\n\");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 0;<br>}<br><br><p>Se a condição <code>(idade &gt;= 18)</code> for verdadeira, a mensagem será exibida.</p><h2>2. Estrutura <code>else</code></h2><p>A estrutura <code>else</code> é usada junto com o <code>if</code> para executar um bloco de código se a condição do <code>if</code> for falsa.</p><br>#include &lt;stdio.h&gt;<br>int main() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int idade = 16;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (idade &gt;= 18) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Você é maior de idade.\n\");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Você é menor de idade.\n\");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 0;<br>}<br><br><p>Se a condição <code>(idade &gt;= 18)</code> for falsa, a mensagem \"Você é menor de idade.\" será exibida.</p><h2>3. Estrutura <code>else if</code></h2><p>A estrutura <code>else if</code> é usada para testar múltiplas condições.</p>#include &lt;stdio.h&gt;<br><br>int main() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int nota = 75;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (nota &gt;= 90) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Nota A.\n\");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (nota &gt;= 80) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Nota B.\n\");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (nota &gt;= 70) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Nota C.\n\");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Nota D.\n\");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 0;<br>}<br><br><p>O programa verifica as condições na ordem e executa o bloco de código do primeiro <code>if</code> ou <code>else if</code> cuja condição for verdadeira.</p><h2>4. Estrutura <code>switch</code></h2><p>A estrutura <code>switch</code> é uma alternativa ao <code>else if</code> para testar uma variável contra diferentes valores.</p>#include &lt;stdio.h&gt;<br><br>int main() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int dia = 3;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch (dia) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 1:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Domingo\n\");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 2:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Segunda-feira\n\");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 3:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Terça-feira\n\");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Outro dia\n\");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 0;<br>}<br>    <p>O <code>switch</code> compara a variável <code>dia</code> com cada <code>case</code>. Quando encontra um <code>case</code> correspondente, executa o bloco de código associado. O <code>break</code> é usado para sair da estrutura <code>switch</code> após executar o bloco de código do <code>case</code> correspondente.</p></body></html>"
    - id: 3
      titulo: "COMANDOS DE REPETIÇÃO"
      texto: "<!DOCTYPE html><html lang=\"pt-BR\"><head>    <meta charset=\"UTF-8\">    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">   </head><body><h1>Comandos de Repetição na Programação em C</h1><p>Os comandos de repetição são usados para executar um bloco de código várias vezes. Na linguagem C, os principais comandos de repetição são o <code>for</code>, <code>while</code> e <code>do...while</code>.</p><h2>1. Estrutura <code>for</code></h2><p>A estrutura <code>for</code> é usada quando sabemos com antecedência quantas vezes queremos repetir um bloco de código.</p><br>#include &lt;stdio.h&gt;<br><br>int main() {<br>&nbsp;&nbsp;&nbsp;&nbsp;for (int i = 0; i &lt; 10; i++) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Número %d\n\", i);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;return 0;<br>}<br><br><p>O loop <code>for</code> inicializa a variável <code>i</code> em 0, verifica a condição <code>i &lt; 10</code> e incrementa <code>i</code> em 1 a cada iteração, executando o bloco de código até que a condição seja falsa.</p><h2>2. Estrutura <code>while</code></h2><p>A estrutura <code>while</code> repete um bloco de código enquanto uma condição for verdadeira.</p><br>#include &lt;stdio.h&gt;<br><br>int main() {<br>&nbsp;&nbsp;&nbsp;&nbsp;int i = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;while (i &lt; 10) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Número %d\n\", i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i++;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;return 0;<br>}<br><br><p>O loop <code>while</code> verifica a condição <code>i &lt; 10</code> antes de cada iteração e executa o bloco de código enquanto a condição for verdadeira.</p><h2>3. Estrutura <code>do...while</code></h2><p>A estrutura <code>do...while</code> é semelhante ao <code>while</code>, mas verifica a condição após cada iteração, garantindo que o bloco de código seja executado pelo menos uma vez.</p><br>#include &lt;stdio.h&gt;<br><br>int main() {<br>&nbsp;&nbsp;&nbsp;&nbsp;int i = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;do {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Número %d\n\", i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i++;<br>&nbsp;&nbsp;&nbsp;&nbsp;} while (i &lt; 10);<br>&nbsp;&nbsp;&nbsp;&nbsp;return 0;<br>}<br><br><p>O loop <code>do...while</code> executa o bloco de código uma vez antes de verificar a condição <code>i &lt; 10</code> após cada iteração.</p></body></html>"
    - id: 4
      titulo: "SUBPROGRAMAS"
      texto: "<!DOCTYPE html><html lang=\"pt-BR\"><head>    <meta charset=\"UTF-8\">    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"></head><body><h1>Subprogramas na Programação em C</h1><p>Subprogramas, também conhecidos como funções ou procedimentos, são blocos de código que realizam uma tarefa específica e podem ser chamados a partir de outras partes do programa. Em C, os subprogramas ajudam a organizar e reutilizar o código.</p><h2>1. Definição de Função</h2><p>Uma função é definida com um tipo de retorno, um nome e parâmetros opcionais. Aqui está um exemplo de função que soma dois números:</p><br>#include &lt;stdio.h&gt;<br><br>int soma(int a, int b) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return a + b;<br>}<br><br>int main() {<br>&nbsp;&nbsp;&nbsp;&nbsp;int resultado = soma(5, 3);<br>&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Resultado: %d\n\", resultado);<br>&nbsp;&nbsp;&nbsp;&nbsp;return 0;<br>}<br><br><p>A função <code>soma</code> recebe dois inteiros como parâmetros e retorna a soma deles. No <code>main</code>, a função é chamada com os valores 5 e 3.</p><h2>2. Funções sem Retorno (void)</h2><p>Funções que não retornam um valor têm o tipo de retorno <code>void</code>. Elas podem executar ações, como exibir uma mensagem:</p><br>#include &lt;stdio.h&gt;<br><br>void saudacao() {<br>&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Olá, mundo!\n\");<br>}<br><br>int main() {<br>&nbsp;&nbsp;&nbsp;&nbsp;saudacao();<br>&nbsp;&nbsp;&nbsp;&nbsp;return 0;<br>}<br><br><p>A função <code>saudacao</code> não retorna nenhum valor e simplesmente imprime \"Olá, mundo!\".</p><h2>3. Passagem de Parâmetros</h2><p>Os parâmetros podem ser passados por valor ou por referência. Aqui está um exemplo de passagem por referência usando ponteiros:</p><br>#include &lt;stdio.h&gt;<br><br>void incrementar(int *n) {<br>&nbsp;&nbsp;&nbsp;&nbsp;(*n)++;<br>}<br><br>int main() {<br>&nbsp;&nbsp;&nbsp;&nbsp;int numero = 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;incrementar(&numero);<br>&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Número incrementado: %d\n\", numero);<br>&nbsp;&nbsp;&nbsp;&nbsp;return 0;<br>}<br><br><p>A função <code>incrementar</code> recebe um ponteiro para um inteiro e incrementa o valor apontado. No <code>main</code>, o endereço de <code>numero</code> é passado para a função.</p><h2>4. Funções Recursivas</h2><p>Funções recursivas chamam a si mesmas. Um exemplo clássico é a função para calcular o fatorial de um número:</p><br>#include &lt;stdio.h&gt;<br><br>int fatorial(int n) {<br>&nbsp;&nbsp;&nbsp;&nbsp;if (n == 0) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return n * fatorial(n - 1);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br><br>int main() {<br>&nbsp;&nbsp;&nbsp;&nbsp;int numero = 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Fatorial de %d: %d\n\", numero, fatorial(numero));<br>&nbsp;&nbsp;&nbsp;&nbsp;return 0;<br>}<br><br><p>A função <code>fatorial</code> chama a si mesma até que <code>n</code> seja 0, retornando 1. Para qualquer outro valor, retorna <code>n</code> multiplicado pelo fatorial de <code>n-1</code>.</p></body></html>"
    - id: 5
      titulo: "ESTRUTURA DE DADOS"
      texto: "<!DOCTYPE html><html lang=\"pt-BR\"><head>    <meta charset=\"UTF-8\">    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">    <title>Estruturas de Dados na Programação em C</title></head><body><h1>Estruturas de Dados na Programação em C</h1><p>Estruturas de dados são maneiras de organizar e armazenar dados de forma eficiente. Em C, algumas das principais estruturas de dados são arrays, structs, listas ligadas, pilhas e filas.</p><h2>1. Arrays</h2><p>Arrays são coleções de elementos do mesmo tipo armazenados em posições contíguas na memória. Eles são úteis para armazenar um conjunto de dados relacionados.</p><br>#include &lt;stdio.h&gt;<br><br>int main() {<br>&nbsp;&nbsp;&nbsp;&nbsp;int numeros[5] = {1, 2, 3, 4, 5};<br>&nbsp;&nbsp;&nbsp;&nbsp;for (int i = 0; i &lt; 5; i++) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Número %d: %d\n\", i, numeros[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;return 0;<br>}<br><br><p>O exemplo acima declara um array de 5 inteiros e imprime cada elemento usando um loop <code>for</code>.</p><h2>2. Structs</h2><p>Structs são usadas para agrupar variáveis de diferentes tipos sob um mesmo nome. Elas são úteis para representar um conjunto de dados relacionados.</p><br>#include &lt;stdio.h&gt;<br><br>typedef struct {<br>&nbsp;&nbsp;&nbsp;&nbsp;char nome[50];<br>&nbsp;&nbsp;&nbsp;&nbsp;int idade;<br>} Pessoa;<br><br>int main() {<br>&nbsp;&nbsp;&nbsp;&nbsp;Pessoa p;<br>&nbsp;&nbsp;&nbsp;&nbsp;strcpy(p.nome, \"João\");<br>&nbsp;&nbsp;&nbsp;&nbsp;p.idade = 30;<br>&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Nome: %s\n\", p.nome);<br>&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Idade: %d\n\", p.idade);<br>&nbsp;&nbsp;&nbsp;&nbsp;return 0;<br>}<br><br><p>A <code>struct</code> <code>Pessoa</code> agrupa um nome e uma idade. No exemplo, criamos uma variável <code>p</code> do tipo <code>Pessoa</code>, definimos seus campos e os imprimimos.</p><h2>3. Listas Ligadas</h2><p>Listas ligadas são estruturas de dados dinâmicas compostas por nós, onde cada nó contém um valor e um ponteiro para o próximo nó. Elas são úteis para manipular conjuntos de dados de tamanho variável.</p><br>#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br><br>typedef struct Node {<br>&nbsp;&nbsp;&nbsp;&nbsp;int valor;<br>&nbsp;&nbsp;&nbsp;&nbsp;struct Node *proximo;<br>} Node;<br><br>int main() {<br>&nbsp;&nbsp;&nbsp;&nbsp;Node *n1 = (Node *)malloc(sizeof(Node));<br>&nbsp;&nbsp;&nbsp;&nbsp;Node *n2 = (Node *)malloc(sizeof(Node));<br>&nbsp;&nbsp;&nbsp;&nbsp;n1-&gt;valor = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;n2-&gt;valor = 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;n1-&gt;proximo = n2;<br>&nbsp;&nbsp;&nbsp;&nbsp;n2-&gt;proximo = NULL;<br>&nbsp;&nbsp;&nbsp;&nbsp;Node *atual = n1;<br>&nbsp;&nbsp;&nbsp;&nbsp;while (atual != NULL) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Valor: %d\n\", atual-&gt;valor);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;atual = atual-&gt;proximo;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;free(n1);<br>&nbsp;&nbsp;&nbsp;&nbsp;free(n2);<br>&nbsp;&nbsp;&nbsp;&nbsp;return 0;<br>}<br><br><p>O exemplo acima cria uma lista ligada com dois nós, inicializa seus valores e imprime os valores armazenados. Lembre-se de liberar a memória alocada com <code>free</code>.</p><h2>4. Pilhas</h2><p>Pilhas são estruturas de dados que seguem a política LIFO (Last In, First Out), onde o último elemento adicionado é o primeiro a ser removido. Elas são úteis para implementar recursão e gerenciamento de memória.</p><br>#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br>#define MAX 100<br><br>typedef struct {<br>&nbsp;&nbsp;&nbsp;&nbsp;int dados[MAX];<br>&nbsp;&nbsp;&nbsp;&nbsp;int topo;<br>} Pilha;<br><br>void inicializar(Pilha *p) {<br>&nbsp;&nbsp;&nbsp;&nbsp;p-&gt;topo = -1;<br>}<br><br>int estaVazia(Pilha *p) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return p-&gt;topo == -1;<br>}<br><br>void empilhar(Pilha *p, int valor) {<br>&nbsp;&nbsp;&nbsp;&nbsp;if (p-&gt;topo &lt; MAX - 1) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p-&gt;dados[++p-&gt;topo] = valor;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br><br>int desempilhar(Pilha *p) {<br>&nbsp;&nbsp;&nbsp;&nbsp;if (!estaVazia(p)) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return p-&gt;dados[p-&gt;topo--];<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;return -1; // Valor indicativo de erro<br>}<br><br>int main() {<br>&nbsp;&nbsp;&nbsp;&nbsp;Pilha p;<br>&nbsp;&nbsp;&nbsp;&nbsp;inicializar(&p);<br>&nbsp;&nbsp;&nbsp;&nbsp;empilhar(&p, 10);<br>&nbsp;&nbsp;&nbsp;&nbsp;empilhar(&p, 20);<br>&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Desempilhado: %d\n\", desempilhar(&p));<br>&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Desempilhado: %d\n\", desempilhar(&p));<br>&nbsp;&nbsp;&nbsp;&nbsp;return 0;<br>}<br><br><p>O exemplo acima demonstra uma pilha implementada com um array. Funções para empilhar e desempilhar são fornecidas, e o programa imprime os valores removidos da pilha.</p><h2>5. Filas</h2><p>Filas são estruturas de dados que seguem a política FIFO (First In, First Out), onde o primeiro elemento adicionado é o primeiro a ser removido. Elas são úteis para gerenciar tarefas e processos.</p><br>#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br>#define MAX 100<br><br>typedef struct {<br>&nbsp;&nbsp;&nbsp;&nbsp;int dados[MAX];<br>&nbsp;&nbsp;&nbsp;&nbsp;int frente;<br>&nbsp;&nbsp;&nbsp;&nbsp;int tras;<br>} Fila;<br><br>void inicializar(Fila *f) {<br>&nbsp;&nbsp;&nbsp;&nbsp;f-&gt;frente = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;f-&gt;tras = -1;<br>}<br><br>int estaVazia(Fila *f) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return f-&gt;frente > f-&gt;tras;<br>}<br><br>void enfileirar(Fila *f, int valor) {<br>&nbsp;&nbsp;&nbsp;&nbsp;if (f-&gt;tras &lt; MAX - 1) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f-&gt;dados[++f-&gt;tras] = valor;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br><br>int desenfileirar(Fila *f) {<br>&nbsp;&nbsp;&nbsp;&nbsp"
    - id: 6
      titulo: "PONTEIROS"
      texto: "<!DOCTYPE html><html lang=\"pt-BR\"><head>    <meta charset=\"UTF-8\">    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">    <title>Ponteiros na Programação em C</title></head><body><h1>Ponteiros na Programação em C</h1><p>Ponteiros são uma das funcionalidades mais poderosas da linguagem C. Eles armazenam o endereço de memória de uma variável, permitindo manipulações diretas na memória, o que pode resultar em programas mais eficientes.</p><h2>1. Declaração de Ponteiros</h2><p>Um ponteiro é declarado com o uso do operador <code>*</code>, que indica que a variável será um ponteiro para um determinado tipo de dado.</p><pre><code>#include&nbsp;&lt;stdio.h&gt;int&nbsp;main()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;x&nbsp;=&nbsp;10;<br>&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;*p;<br>&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;=&nbsp;&amp;x;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Valor&nbsp;de&nbsp;x:&nbsp;%d\n\",&nbsp;x);<br>&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Endereço&nbsp;de&nbsp;x:&nbsp;%p\n\",&nbsp;&amp;x);<br>&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Valor&nbsp;armazenado&nbsp;em&nbsp;p&nbsp;(endereço&nbsp;de&nbsp;x):&nbsp;%p\n\",&nbsp;p);<br>&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Valor&nbsp;apontado&nbsp;por&nbsp;p:&nbsp;%d\n\",*&nbsp;p);&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;0;}</code></pre><p>O exemplo acima declara um ponteiro <code>p</code> que armazena o endereço da variável <code>x</code>. Acessamos o valor de <code>x</code> tanto diretamente quanto indiretamente através de <code>p</code> usando o operador <code>*</code> (desreferenciação).</p><h2>2. Ponteiros e Arrays</h2><p>Arrays e ponteiros estão intimamente relacionados, já que o nome de um array em C é, na verdade, um ponteiro para o seu primeiro elemento.</p><pre><code>#include&nbsp;&lt;stdio.h&gt;int&nbsp;main()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;arr[3]&nbsp;=&nbsp;{1,&nbsp;2,&nbsp;3};<br>&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;*p&nbsp;=&nbsp;arr;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;3;&nbsp;i++)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Elemento&nbsp;%d:&nbsp;%d\n\",&nbsp;i,&nbsp;*(p&nbsp;+&nbsp;i));<br>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;0;}</code></pre><p>No exemplo acima, o ponteiro <code>p</code> aponta para o primeiro elemento do array <code>arr</code>. Podemos acessar os elementos do array utilizando a aritmética de ponteiros.</p><h2>3. Ponteiros e Funções</h2><p>Ponteiros são frequentemente utilizados para passar variáveis por referência para funções, permitindo que uma função modifique o valor original de uma variável fora do seu escopo.</p><pre><code>#include&nbsp;&lt;stdio.h&gt;void&nbsp;incrementa(int&nbsp;*p)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;(*p)++;}int&nbsp;main()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;x&nbsp;=&nbsp;10;<br>&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Valor&nbsp;de&nbsp;x&nbsp;antes:&nbsp;%d\n\",&nbsp;x);<br>&nbsp;&nbsp;&nbsp;&nbsp;incrementa(&nbsp;&amp;x);<br>&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Valor&nbsp;de&nbsp;x&nbsp;depois:&nbsp;%d\n\",&nbsp;x);&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;0;}</code></pre><p>A função <code>incrementa</code> recebe um ponteiro como argumento, permitindo modificar o valor da variável <code>x</code> dentro da função.</p><h2>4. Alocação Dinâmica de Memória</h2><p>Ponteiros são essenciais para alocar memória dinamicamente usando funções como <code>malloc</code> e <code>free</code>, que permitem gerenciar a memória em tempo de execução.</p><pre><code>#include&nbsp;&lt;stdio.h&gt;<br>#include&nbsp;&lt;stdlib.h&gt;int&nbsp;main()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;*p&nbsp;=&nbsp;(int&nbsp;*)malloc(3&nbsp;*&nbsp;sizeof(int));&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(p&nbsp;==&nbsp;NULL)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Erro&nbsp;ao&nbsp;alocar&nbsp;memória.\n\");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;1;<br>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;3;&nbsp;i++)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p[i]&nbsp;=&nbsp;i&nbsp;+&nbsp;1;<br>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;3;&nbsp;i++)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(\"Elemento&nbsp;%d:&nbsp;%d\n\",&nbsp;i,&nbsp;p[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;free(p);&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;0;}</code></pre><p>No exemplo acima, usamos <code>malloc</code> para alocar memória para um array de três inteiros e, após o uso, liberamos a memória com <code>free</code>.</p></body></html>"

insignias:
  lista:
    - id: 1
      nome: Iniciante promissor
      descricao: Acerte as 3 primeiras questões
      imagem: insignia_1.png

    - id: 2
      nome: Programador supremo
      descricao: Acerte todas as questões
      imagem: insignia_2.png

    - id: 3
      nome: Monitor de algoritmos
      descricao: Lidere o ranking em algum momento
      imagem: insignia_3.png

    - id: 4
      nome: Cavaleiro de bronze
      descricao: Esteja no TOP 3 do ranking em algum momento
      imagem: insignia_4.png

    - id: 5
      nome: Metade da jornada
      descricao: Consiga 50 pontos
      imagem: insignia_5.png

    - id: 6
      nome: Enciclopédia viva
      descricao: Complete o caderno de anotações
      imagem: insignia_6.png

    - id: 7
      nome: Diário do programador
      descricao: Adquira sua primeira anotação
      imagem: insignia_7.png

    - id: 8
      nome: Guardião do saber
      descricao: Preencha 4 anotações
      imagem: insignia_8.png

    - id: 9
      nome: Saindo da caverna
      descricao: Complete sua primeira interação com algum personagem
      imagem: insignia_9.png

    - id: 10
      nome: Tagarela compulsivo
      descricao: Converse com todos os personagens
      imagem: insignia_10.png

    - id: 11
      nome: A Skynet é real
      descricao: Converse com Ian, a IA
      imagem: insignia_11.png

    - id: 12
      nome: Rei da platina
      descricao: Libere todas as insígnias
      imagem: insignia_12.png
